{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"starlite-saqlalchemy \u00b6 Starlite, SQLAlchemy 2.0 and SAQ configuration plugin. Simple Example \"\"\"The minimal Starlite/starlite-saqlalchemy application.\"\"\" from starlite import Starlite , get from starlite_saqlalchemy import ConfigureApp @get ( \"/example\" ) def example_handler () -> dict : \"\"\"Hello, world!\"\"\" return { \"hello\" : \"world\" } app = Starlite ( route_handlers = [ example_handler ], on_app_init = [ ConfigureApp ()]) Configuration via environment. Example .env # App BUILD_NUMBER= DEBUG=true ENVIRONMENT= LOG_LEVEL=INFO NAME=my-starlite-app # API API_CACHE_EXPIRATION=60 API_DEFAULT_PAGINATION_LIMIT=100 API_HEALTH_PATH=/health API_DB_SESSION_DEPENDENCY_KEY=db_session # OpenAPI OPENAPI_CONTACT_EMAIL=some_human@email.com OPENAPI_CONTACT_NAME=\"Some Human\" OPENAPI_TITLE=\"My Starlite App\" OPENAPI_VERSION=1.0.0 # Sentry SENTRY_DSN= SENTRY_TRACES_SAMPLE_RATE=0.0001 # Redis REDIS_URL=redis://cache.local:6379/0 # Database DB_ECHO=false DB_ECHO_POOL=false DB_POOL_DISABLE=false DB_POOL_MAX_OVERFLOW=10 DB_POOL_SIZE=5 DB_POOL_TIMEOUT=30 DB_URL=postgresql+asyncpg://postgres:mysecretpassword@pg.db.local:5432/db Pattern \u00b6 sequenceDiagram Client ->> Controller: Inbound request data Controller ->> Service: Invoke service with data validated by DTO Service ->> Repository: View or modify the collection Repository ->> Service: Detached SQLAlchemy instance(s) Service ->> Queue: Enqueue async callback Service ->> Controller: Outbound data Controller ->> Client: Serialize via DTO Queue ->> Worker: Worker invoked Worker ->> Service: Makes async callback Request data is deserialized and validated by Starlite before it is received by controller. Controller invokes relevant service object method and waits for response. Service method handles business logic of the request and triggers an asynchronous callback. Service method returns to controller and response is made to client. Async worker makes callback to service object where any async tasks can be performed. Depending on architecture, this may not even be the same instance of the application that handled the request.","title":"starlite-saqlalchemy"},{"location":"#starlite-saqlalchemy","text":"Starlite, SQLAlchemy 2.0 and SAQ configuration plugin. Simple Example \"\"\"The minimal Starlite/starlite-saqlalchemy application.\"\"\" from starlite import Starlite , get from starlite_saqlalchemy import ConfigureApp @get ( \"/example\" ) def example_handler () -> dict : \"\"\"Hello, world!\"\"\" return { \"hello\" : \"world\" } app = Starlite ( route_handlers = [ example_handler ], on_app_init = [ ConfigureApp ()]) Configuration via environment. Example .env # App BUILD_NUMBER= DEBUG=true ENVIRONMENT= LOG_LEVEL=INFO NAME=my-starlite-app # API API_CACHE_EXPIRATION=60 API_DEFAULT_PAGINATION_LIMIT=100 API_HEALTH_PATH=/health API_DB_SESSION_DEPENDENCY_KEY=db_session # OpenAPI OPENAPI_CONTACT_EMAIL=some_human@email.com OPENAPI_CONTACT_NAME=\"Some Human\" OPENAPI_TITLE=\"My Starlite App\" OPENAPI_VERSION=1.0.0 # Sentry SENTRY_DSN= SENTRY_TRACES_SAMPLE_RATE=0.0001 # Redis REDIS_URL=redis://cache.local:6379/0 # Database DB_ECHO=false DB_ECHO_POOL=false DB_POOL_DISABLE=false DB_POOL_MAX_OVERFLOW=10 DB_POOL_SIZE=5 DB_POOL_TIMEOUT=30 DB_URL=postgresql+asyncpg://postgres:mysecretpassword@pg.db.local:5432/db","title":"starlite-saqlalchemy"},{"location":"#pattern","text":"sequenceDiagram Client ->> Controller: Inbound request data Controller ->> Service: Invoke service with data validated by DTO Service ->> Repository: View or modify the collection Repository ->> Service: Detached SQLAlchemy instance(s) Service ->> Queue: Enqueue async callback Service ->> Controller: Outbound data Controller ->> Client: Serialize via DTO Queue ->> Worker: Worker invoked Worker ->> Service: Makes async callback Request data is deserialized and validated by Starlite before it is received by controller. Controller invokes relevant service object method and waits for response. Service method handles business logic of the request and triggers an asynchronous callback. Service method returns to controller and response is made to client. Async worker makes callback to service object where any async tasks can be performed. Depending on architecture, this may not even be the same instance of the application that handled the request.","title":"Pattern"},{"location":"reference/SUMMARY/","text":"starlite_saqlalchemy cache compression constants dependencies dto endpoint_decorator exceptions health http init_plugin logging openapi orm redis repository abc exceptions filters sqlalchemy types response sentry service settings sqlalchemy_plugin static_files worker","title":"SUMMARY"},{"location":"reference/starlite_saqlalchemy/","text":"starlite-saqlalchemy \u00b6 An implementation of a Starlite application configuration plugin. Example: from starlite import Starlite , get from starlite_saqlalchemy import ConfigureApp @get ( \"/example\" ) def example_handler () -> dict : return { \"hello\" : \"world\" } app = Starlite ( route_handlers = [ example_handler ], on_app_init = [ ConfigureApp ()]) ConfigureApp \u00b6 ConfigureApp ( config = PluginConfig ()) Starlite application configuration. Parameters: Name Type Description Default config PluginConfig Provide a config object to customize the behavior of the plugin. PluginConfig() __call__ \u00b6 __call__ ( app_config ) Entrypoint to the app config plugin. Receives the AppConfig object and modifies it. Parameters: Name Type Description Default app_config AppConfig Passed to the plugin from the Starlite instance on instantiation. required Returns: Type Description AppConfig The modified AppConfig object. configure_after_exception \u00b6 configure_after_exception ( app_config ) Add the logging after exception hook handler. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_cache \u00b6 configure_cache ( app_config ) Configure the application cache. We only overwrite if DEFAULT_CACHE_CONFIG is the standing configuration object. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_collection_dependencies \u00b6 configure_collection_dependencies ( app_config ) Add the required Provide instances to the app dependency mapping. If a dependency has already been provided with the same key we do not overwrite it. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_compression \u00b6 configure_compression ( app_config ) Configure application compression. No-op if AppConfig.compression_config has already been set. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_exception_handlers \u00b6 configure_exception_handlers ( app_config ) Add the handlers that translate service and repository exceptions into HTTP exceptions. Does not overwrite handlers that may already exist for the exception types. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_health_check \u00b6 configure_health_check ( app_config ) Adds the health check controller. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_logging \u00b6 configure_logging ( app_config ) Configures application logging if it has not already been configured. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_openapi \u00b6 configure_openapi ( app_config ) Configures the OpenAPI docs if they have not already been configured. We only overwrite if DEFAULT_OPENAPI_CONFIG is the standing configuration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_response_class \u00b6 configure_response_class ( app_config ) Add the custom response class. No-op if the AppConfig.response_class is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_sentry \u00b6 configure_sentry ( app_config ) Add handler to configure Sentry integration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_sqlalchemy_plugin \u00b6 configure_sqlalchemy_plugin ( app_config ) Configure SQLAlchemy for the application. Adds a configured SQLAlchemyPlugin to AppConfig.plugins . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_static_files \u00b6 configure_static_files ( app_config ) Configure static files for the application. No-op if AppConfig.static_files_config is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_worker \u00b6 configure_worker ( app_config ) Configure the SAQ async worker. No-op if there are no worker functions set on PluginConfig . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required PluginConfig \u00b6 Bases: BaseModel Configure behavior of the ConfigureApp object. Each feature that the plugin enables can be toggled with the do_<behavior> switch, e.g., PluginConfig(do_after_exception=False) will tell ConfigureApp not to add the after exception logging hook handler to the application. do_after_exception class-attribute \u00b6 do_after_exception : bool = True Add the hook handler to AppConfig.after_exception . do_cache class-attribute \u00b6 do_cache : bool = True Add configuration for the redis-backed cache to AppConfig.cache_config . do_collection_dependencies class-attribute \u00b6 do_collection_dependencies = True Add the Provide 's for collection route dependencies to AppConfig.dependencies . do_compression class-attribute \u00b6 do_compression : bool = True Add configuration for gzip compression to AppConfig.compression_config . do_exception_handlers class-attribute \u00b6 do_exception_handlers : bool = True Add the repository/service exception http translation handlers to AppConfig.exception_handlers . do_health_check class-attribute \u00b6 do_health_check : bool = True Add the health check controller to AppConfig.route_handlers . do_logging class-attribute \u00b6 do_logging : bool = True Set the logging configuration object to AppConfig.logging_config . do_openapi class-attribute \u00b6 do_openapi : bool = True Set the OpenAPI config object to AppConfig.openapi_config . do_response_class class-attribute \u00b6 do_response_class : bool = True Set the custom response class to AppConfig.response_class . do_sentry class-attribute \u00b6 do_sentry : bool = True Configure the application to initialize Sentry on startup. Adds a handler to AppConfig.on_startup . do_sqlalchemy_plugin class-attribute \u00b6 do_sqlalchemy_plugin : bool = True Set the SQLAlchemy plugin on the application. Adds the plugin to AppConfig.plugins . do_static_files class-attribute \u00b6 do_static_files : bool = True Set the static files config object to AppConfig.static_files_config . do_worker class-attribute \u00b6 do_worker : bool = True Configure the async worker on the application. This action instantiates a worker instance and sets handlers for AppConfig.on_startup and AppConfig.on_shutdown that manage the lifecycle of the SAQ worker. worker_functions class-attribute \u00b6 worker_functions : list [ WorkerFunction | tuple [ str , WorkerFunction ]] = [] Queue worker functions.","title":"starlite_saqlalchemy"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy--starlite-saqlalchemy","text":"An implementation of a Starlite application configuration plugin. Example: from starlite import Starlite , get from starlite_saqlalchemy import ConfigureApp @get ( \"/example\" ) def example_handler () -> dict : return { \"hello\" : \"world\" } app = Starlite ( route_handlers = [ example_handler ], on_app_init = [ ConfigureApp ()])","title":"starlite-saqlalchemy"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.ConfigureApp","text":"ConfigureApp ( config = PluginConfig ()) Starlite application configuration. Parameters: Name Type Description Default config PluginConfig Provide a config object to customize the behavior of the plugin. PluginConfig()","title":"ConfigureApp"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.__call__","text":"__call__ ( app_config ) Entrypoint to the app config plugin. Receives the AppConfig object and modifies it. Parameters: Name Type Description Default app_config AppConfig Passed to the plugin from the Starlite instance on instantiation. required Returns: Type Description AppConfig The modified AppConfig object.","title":"__call__()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_after_exception","text":"configure_after_exception ( app_config ) Add the logging after exception hook handler. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_after_exception()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_cache","text":"configure_cache ( app_config ) Configure the application cache. We only overwrite if DEFAULT_CACHE_CONFIG is the standing configuration object. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_cache()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_collection_dependencies","text":"configure_collection_dependencies ( app_config ) Add the required Provide instances to the app dependency mapping. If a dependency has already been provided with the same key we do not overwrite it. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_collection_dependencies()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_compression","text":"configure_compression ( app_config ) Configure application compression. No-op if AppConfig.compression_config has already been set. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_compression()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_exception_handlers","text":"configure_exception_handlers ( app_config ) Add the handlers that translate service and repository exceptions into HTTP exceptions. Does not overwrite handlers that may already exist for the exception types. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_exception_handlers()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_health_check","text":"configure_health_check ( app_config ) Adds the health check controller. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_health_check()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_logging","text":"configure_logging ( app_config ) Configures application logging if it has not already been configured. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_logging()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_openapi","text":"configure_openapi ( app_config ) Configures the OpenAPI docs if they have not already been configured. We only overwrite if DEFAULT_OPENAPI_CONFIG is the standing configuration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_openapi()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_response_class","text":"configure_response_class ( app_config ) Add the custom response class. No-op if the AppConfig.response_class is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_response_class()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_sentry","text":"configure_sentry ( app_config ) Add handler to configure Sentry integration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_sentry()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_sqlalchemy_plugin","text":"configure_sqlalchemy_plugin ( app_config ) Configure SQLAlchemy for the application. Adds a configured SQLAlchemyPlugin to AppConfig.plugins . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_sqlalchemy_plugin()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_static_files","text":"configure_static_files ( app_config ) Configure static files for the application. No-op if AppConfig.static_files_config is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_static_files()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_worker","text":"configure_worker ( app_config ) Configure the SAQ async worker. No-op if there are no worker functions set on PluginConfig . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_worker()"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.PluginConfig","text":"Bases: BaseModel Configure behavior of the ConfigureApp object. Each feature that the plugin enables can be toggled with the do_<behavior> switch, e.g., PluginConfig(do_after_exception=False) will tell ConfigureApp not to add the after exception logging hook handler to the application.","title":"PluginConfig"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_after_exception","text":"do_after_exception : bool = True Add the hook handler to AppConfig.after_exception .","title":"do_after_exception"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_cache","text":"do_cache : bool = True Add configuration for the redis-backed cache to AppConfig.cache_config .","title":"do_cache"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_collection_dependencies","text":"do_collection_dependencies = True Add the Provide 's for collection route dependencies to AppConfig.dependencies .","title":"do_collection_dependencies"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_compression","text":"do_compression : bool = True Add configuration for gzip compression to AppConfig.compression_config .","title":"do_compression"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_exception_handlers","text":"do_exception_handlers : bool = True Add the repository/service exception http translation handlers to AppConfig.exception_handlers .","title":"do_exception_handlers"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_health_check","text":"do_health_check : bool = True Add the health check controller to AppConfig.route_handlers .","title":"do_health_check"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_logging","text":"do_logging : bool = True Set the logging configuration object to AppConfig.logging_config .","title":"do_logging"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_openapi","text":"do_openapi : bool = True Set the OpenAPI config object to AppConfig.openapi_config .","title":"do_openapi"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_response_class","text":"do_response_class : bool = True Set the custom response class to AppConfig.response_class .","title":"do_response_class"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_sentry","text":"do_sentry : bool = True Configure the application to initialize Sentry on startup. Adds a handler to AppConfig.on_startup .","title":"do_sentry"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_sqlalchemy_plugin","text":"do_sqlalchemy_plugin : bool = True Set the SQLAlchemy plugin on the application. Adds the plugin to AppConfig.plugins .","title":"do_sqlalchemy_plugin"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_static_files","text":"do_static_files : bool = True Set the static files config object to AppConfig.static_files_config .","title":"do_static_files"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.do_worker","text":"do_worker : bool = True Configure the async worker on the application. This action instantiates a worker instance and sets handlers for AppConfig.on_startup and AppConfig.on_shutdown that manage the lifecycle of the SAQ worker.","title":"do_worker"},{"location":"reference/starlite_saqlalchemy/#starlite_saqlalchemy.init_plugin.PluginConfig.worker_functions","text":"worker_functions : list [ WorkerFunction | tuple [ str , WorkerFunction ]] = [] Queue worker functions.","title":"worker_functions"},{"location":"reference/starlite_saqlalchemy/cache/","text":"Application cache config. config module-attribute \u00b6 config = CacheConfig ( backend = redis . client , expiration = settings . api . CACHE_EXPIRATION , cache_key_builder = cache_key_builder , ) Cache configuration for application. cache_key_builder \u00b6 cache_key_builder ( request ) App name prefixed cache key builder. Parameters \u00b6 Request Current request instance. Returns \u00b6 str App slug prefixed cache key.","title":"cache"},{"location":"reference/starlite_saqlalchemy/cache/#starlite_saqlalchemy.cache.config","text":"config = CacheConfig ( backend = redis . client , expiration = settings . api . CACHE_EXPIRATION , cache_key_builder = cache_key_builder , ) Cache configuration for application.","title":"config"},{"location":"reference/starlite_saqlalchemy/cache/#starlite_saqlalchemy.cache.cache_key_builder","text":"cache_key_builder ( request ) App name prefixed cache key builder.","title":"cache_key_builder()"},{"location":"reference/starlite_saqlalchemy/cache/#starlite_saqlalchemy.cache.cache_key_builder--parameters","text":"Request Current request instance.","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/cache/#starlite_saqlalchemy.cache.cache_key_builder--returns","text":"str App slug prefixed cache key.","title":"Returns"},{"location":"reference/starlite_saqlalchemy/compression/","text":"Compression configuration for the application. config module-attribute \u00b6 config = CompressionConfig ( backend = 'gzip' ) Default compression config","title":"compression"},{"location":"reference/starlite_saqlalchemy/compression/#starlite_saqlalchemy.compression.config","text":"config = CompressionConfig ( backend = 'gzip' ) Default compression config","title":"config"},{"location":"reference/starlite_saqlalchemy/constants/","text":"Constants for the application. FAVICON_PATH module-attribute \u00b6 FAVICON_PATH = f ' { STATIC_PATH } /starlite-favicon.ico' Name of the favicon file in the static directory STATIC_DIR module-attribute \u00b6 STATIC_DIR = 'static' Name of the static directory STATIC_PATH module-attribute \u00b6 STATIC_PATH = '/static' Path static files are served from","title":"constants"},{"location":"reference/starlite_saqlalchemy/constants/#starlite_saqlalchemy.constants.FAVICON_PATH","text":"FAVICON_PATH = f ' { STATIC_PATH } /starlite-favicon.ico' Name of the favicon file in the static directory","title":"FAVICON_PATH"},{"location":"reference/starlite_saqlalchemy/constants/#starlite_saqlalchemy.constants.STATIC_DIR","text":"STATIC_DIR = 'static' Name of the static directory","title":"STATIC_DIR"},{"location":"reference/starlite_saqlalchemy/constants/#starlite_saqlalchemy.constants.STATIC_PATH","text":"STATIC_PATH = '/static' Path static files are served from","title":"STATIC_PATH"},{"location":"reference/starlite_saqlalchemy/dependencies/","text":"Application dependency providers. create_collection_dependencies \u00b6 create_collection_dependencies () Creates a dictionary of provides for pagination endpoints. Returns dict[str, Provide] provide_created_filter \u00b6 provide_created_filter ( before = Parameter ( query = \"created-before\" , default = None , required = False ), after = Parameter ( query = \"created-after\" , default = None , required = False ), ) Return type consumed by Repository.filter_on_datetime_field() . Parameters \u00b6 datetime | None Filter for records updated before this date/time. datetime | None Filter for records updated after this date/time. provide_filter_dependencies \u00b6 provide_filter_dependencies ( created_filter = Dependency ( skip_validation = True ), updated_filter = Dependency ( skip_validation = True ), id_filter = Dependency ( skip_validation = True ), limit_offset = Dependency ( skip_validation = True ), ) Common collection route filtering dependencies. Add all filters to any route by including this function as a dependency, e.g: @get def get_collection_handler(filters: Filters) -> ...: ... The dependency is provided at the application layer, so only need to inject the dependency where necessary. Parameters \u00b6 repository.CollectionFilter Filter for scoping query to limited set of identities. repository.BeforeAfter Filter for scoping query to instance creation date/time. repository.BeforeAfter Filter for scoping query to instance update date/time. repository.LimitOffset Filter for query pagination. Returns \u00b6 list[FilterTypes] List of filters parsed from connection. provide_id_filter \u00b6 provide_id_filter ( ids = Parameter ( query = 'ids' , default = None , required = False )) Return type consumed by Repository.filter_in_collection() . Parameters \u00b6 list[UUID] | None Parsed out of comma separated list of values in query params. Returns \u00b6 CollectionFilter[UUID] provide_limit_offset_pagination \u00b6 provide_limit_offset_pagination ( page = Parameter ( ge = 1 , default = 1 , required = False ), page_size = Parameter ( query = \"page-size\" , ge = 1 , default = settings . api . DEFAULT_PAGINATION_LIMIT , required = False ), ) Return type consumed by Repository.apply_limit_offset_pagination() . Parameters int LIMIT to apply to select. int OFFSET to apply to select. provide_updated_filter \u00b6 provide_updated_filter ( before = Parameter ( query = \"updated-before\" , default = None , required = False ), after = Parameter ( query = \"updated-after\" , default = None , required = False ), ) Return type consumed by Repository.filter_on_datetime_field() . Parameters datetime | None Filter for records updated before this date/time. datetime | None Filter for records updated after this date/time.","title":"dependencies"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.create_collection_dependencies","text":"create_collection_dependencies () Creates a dictionary of provides for pagination endpoints. Returns dict[str, Provide]","title":"create_collection_dependencies()"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_created_filter","text":"provide_created_filter ( before = Parameter ( query = \"created-before\" , default = None , required = False ), after = Parameter ( query = \"created-after\" , default = None , required = False ), ) Return type consumed by Repository.filter_on_datetime_field() .","title":"provide_created_filter()"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_created_filter--parameters","text":"datetime | None Filter for records updated before this date/time. datetime | None Filter for records updated after this date/time.","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_filter_dependencies","text":"provide_filter_dependencies ( created_filter = Dependency ( skip_validation = True ), updated_filter = Dependency ( skip_validation = True ), id_filter = Dependency ( skip_validation = True ), limit_offset = Dependency ( skip_validation = True ), ) Common collection route filtering dependencies. Add all filters to any route by including this function as a dependency, e.g: @get def get_collection_handler(filters: Filters) -> ...: ... The dependency is provided at the application layer, so only need to inject the dependency where necessary.","title":"provide_filter_dependencies()"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_filter_dependencies--parameters","text":"repository.CollectionFilter Filter for scoping query to limited set of identities. repository.BeforeAfter Filter for scoping query to instance creation date/time. repository.BeforeAfter Filter for scoping query to instance update date/time. repository.LimitOffset Filter for query pagination.","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_filter_dependencies--returns","text":"list[FilterTypes] List of filters parsed from connection.","title":"Returns"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_id_filter","text":"provide_id_filter ( ids = Parameter ( query = 'ids' , default = None , required = False )) Return type consumed by Repository.filter_in_collection() .","title":"provide_id_filter()"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_id_filter--parameters","text":"list[UUID] | None Parsed out of comma separated list of values in query params.","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_id_filter--returns","text":"CollectionFilter[UUID]","title":"Returns"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_limit_offset_pagination","text":"provide_limit_offset_pagination ( page = Parameter ( ge = 1 , default = 1 , required = False ), page_size = Parameter ( query = \"page-size\" , ge = 1 , default = settings . api . DEFAULT_PAGINATION_LIMIT , required = False ), ) Return type consumed by Repository.apply_limit_offset_pagination() . Parameters int LIMIT to apply to select. int OFFSET to apply to select.","title":"provide_limit_offset_pagination()"},{"location":"reference/starlite_saqlalchemy/dependencies/#starlite_saqlalchemy.dependencies.provide_updated_filter","text":"provide_updated_filter ( before = Parameter ( query = \"updated-before\" , default = None , required = False ), after = Parameter ( query = \"updated-after\" , default = None , required = False ), ) Return type consumed by Repository.filter_on_datetime_field() . Parameters datetime | None Filter for records updated before this date/time. datetime | None Filter for records updated after this date/time.","title":"provide_updated_filter()"},{"location":"reference/starlite_saqlalchemy/dto/","text":"Using this implementation instead of the starlite.SQLAlchemy plugin DTO as a POC for using the SQLAlchemy model type annotations to build the pydantic model. Also experimenting with marking columns for DTO purposes using the SQLAlchemy.Column.info field, which allows demarcation of fields that should always be private, or read-only at the model declaration layer. Mode \u00b6 Bases: Enum For marking column definitions on the domain models. Example class Model ( Base ): ... updated_at : Mapped [ datetime ] = mapped_column ( info = { \"dto\" : Mode . READ_ONLY }) Purpose \u00b6 Bases: Enum For identifying the purpose of a DTO to the factory. The factory will exclude fields marked as private or read-only on the domain model depending on the purpose of the DTO. Example ReadDTO = dto . factory ( \"AuthorReadDTO\" , Author , purpose = dto . Purpose . READ ) factory \u00b6 factory ( name , model , purpose , exclude = None ) Create a pydantic model class from a SQLAlchemy declarative ORM class. The fields that are included in the model can be controlled on the SQLAlchemy class definition by including a \"dto\" key in the Column.info mapping. For example: ```python class User(DeclarativeBase): id: Mapped[UUID] = mapped_column( default=uuid4, primary_key=True, info={\"dto\": dto.Mode.READ_ONLY} ) email: Mapped[str] password_hash: Mapped[str] = mapped_column(info={\"dto\": dto.Mode.PRIVATE}) ``` In the above example, a DTO generated for Purpose.READ will include the id and email fields, while a model generated for Purpose.WRITE will only include a field for email . Notice that columns marked as Mode.PRIVATE will not have a field produced in any DTO object. Parameters: Name Type Description Default name str Name given to the DTO class. required model type [ DeclarativeBase ] The SQLAlchemy model class. required purpose Purpose Is the DTO for write or read operations? required exclude set [ str ] | None Explicitly exclude attributes from the DTO. None Returns: Type Description type [ BaseModel ] A Pydantic model that includes only fields that are appropriate to purpose and not in type [ BaseModel ] exclude .","title":"dto"},{"location":"reference/starlite_saqlalchemy/dto/#starlite_saqlalchemy.dto.Mode","text":"Bases: Enum For marking column definitions on the domain models. Example class Model ( Base ): ... updated_at : Mapped [ datetime ] = mapped_column ( info = { \"dto\" : Mode . READ_ONLY })","title":"Mode"},{"location":"reference/starlite_saqlalchemy/dto/#starlite_saqlalchemy.dto.Purpose","text":"Bases: Enum For identifying the purpose of a DTO to the factory. The factory will exclude fields marked as private or read-only on the domain model depending on the purpose of the DTO. Example ReadDTO = dto . factory ( \"AuthorReadDTO\" , Author , purpose = dto . Purpose . READ )","title":"Purpose"},{"location":"reference/starlite_saqlalchemy/dto/#starlite_saqlalchemy.dto.factory","text":"factory ( name , model , purpose , exclude = None ) Create a pydantic model class from a SQLAlchemy declarative ORM class. The fields that are included in the model can be controlled on the SQLAlchemy class definition by including a \"dto\" key in the Column.info mapping. For example: ```python class User(DeclarativeBase): id: Mapped[UUID] = mapped_column( default=uuid4, primary_key=True, info={\"dto\": dto.Mode.READ_ONLY} ) email: Mapped[str] password_hash: Mapped[str] = mapped_column(info={\"dto\": dto.Mode.PRIVATE}) ``` In the above example, a DTO generated for Purpose.READ will include the id and email fields, while a model generated for Purpose.WRITE will only include a field for email . Notice that columns marked as Mode.PRIVATE will not have a field produced in any DTO object. Parameters: Name Type Description Default name str Name given to the DTO class. required model type [ DeclarativeBase ] The SQLAlchemy model class. required purpose Purpose Is the DTO for write or read operations? required exclude set [ str ] | None Explicitly exclude attributes from the DTO. None Returns: Type Description type [ BaseModel ] A Pydantic model that includes only fields that are appropriate to purpose and not in type [ BaseModel ] exclude .","title":"factory()"},{"location":"reference/starlite_saqlalchemy/endpoint_decorator/","text":"This @endpoint decorator pattern comes from. api-client and the following license applies to that original code Copyright (c) 2018 The Python Packaging Authority Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. endpoint \u00b6 endpoint ( cls_ = None , base_url = None ) Decorator for automatically constructing urls from a base and defined resources. >>> @endpoint(base_url=\"https://somewhere.com\") ... class Endpoints: ... path = \"/path\" ... >>> assert Endpoints.path == \"https://somewhere.com/path\"","title":"endpoint_decorator"},{"location":"reference/starlite_saqlalchemy/endpoint_decorator/#starlite_saqlalchemy.endpoint_decorator.endpoint","text":"endpoint ( cls_ = None , base_url = None ) Decorator for automatically constructing urls from a base and defined resources. >>> @endpoint(base_url=\"https://somewhere.com\") ... class Endpoints: ... path = \"/path\" ... >>> assert Endpoints.path == \"https://somewhere.com/path\"","title":"endpoint()"},{"location":"reference/starlite_saqlalchemy/exceptions/","text":"Definition of extra HTTP exceptions that aren't included in Starlite . Also, defines functions that translate service and repository exceptions into HTTP exceptions. ConflictException \u00b6 Bases: HTTPException Request conflict with the current state of the target resource. ForbiddenException \u00b6 Bases: HTTPException Server understands the request but refuses to authorize it. after_exception_hook_handler \u00b6 after_exception_hook_handler ( exc , scope , state ) Logs exception and returns appropriate response. Parameters: Name Type Description Default exc Exception the exception that was raised. required scope Scope scope of the request required state State application state required repository_exception_to_http_response \u00b6 repository_exception_to_http_response ( request , exc ) Transform repository exceptions to HTTP exceptions. Parameters: Name Type Description Default request Request The request that experienced the exception. required exc RepositoryException Exception raised during handling of the request. required Returns: Type Description Response Exception response appropriate to the type of original exception. service_exception_to_http_response \u00b6 service_exception_to_http_response ( request , exc ) Transform service exceptions to HTTP exceptions. Parameters: Name Type Description Default request Request The request that experienced the exception. required exc ServiceException Exception raised during handling of the request. required Returns: Type Description Response Exception response appropriate to the type of original exception.","title":"exceptions"},{"location":"reference/starlite_saqlalchemy/exceptions/#starlite_saqlalchemy.exceptions.ConflictException","text":"Bases: HTTPException Request conflict with the current state of the target resource.","title":"ConflictException"},{"location":"reference/starlite_saqlalchemy/exceptions/#starlite_saqlalchemy.exceptions.ForbiddenException","text":"Bases: HTTPException Server understands the request but refuses to authorize it.","title":"ForbiddenException"},{"location":"reference/starlite_saqlalchemy/exceptions/#starlite_saqlalchemy.exceptions.after_exception_hook_handler","text":"after_exception_hook_handler ( exc , scope , state ) Logs exception and returns appropriate response. Parameters: Name Type Description Default exc Exception the exception that was raised. required scope Scope scope of the request required state State application state required","title":"after_exception_hook_handler()"},{"location":"reference/starlite_saqlalchemy/exceptions/#starlite_saqlalchemy.exceptions.repository_exception_to_http_response","text":"repository_exception_to_http_response ( request , exc ) Transform repository exceptions to HTTP exceptions. Parameters: Name Type Description Default request Request The request that experienced the exception. required exc RepositoryException Exception raised during handling of the request. required Returns: Type Description Response Exception response appropriate to the type of original exception.","title":"repository_exception_to_http_response()"},{"location":"reference/starlite_saqlalchemy/exceptions/#starlite_saqlalchemy.exceptions.service_exception_to_http_response","text":"service_exception_to_http_response ( request , exc ) Transform service exceptions to HTTP exceptions. Parameters: Name Type Description Default request Request The request that experienced the exception. required exc ServiceException Exception raised during handling of the request. required Returns: Type Description Response Exception response appropriate to the type of original exception.","title":"service_exception_to_http_response()"},{"location":"reference/starlite_saqlalchemy/health/","text":"Health check handler for the application. Returns the app settings as details if successful, otherwise a 503. HealthCheckFailure \u00b6 Bases: ServiceUnavailableException Raise for health check failure. health_check async \u00b6 health_check ( db_session ) Check database available and returns app config info.","title":"health"},{"location":"reference/starlite_saqlalchemy/health/#starlite_saqlalchemy.health.HealthCheckFailure","text":"Bases: ServiceUnavailableException Raise for health check failure.","title":"HealthCheckFailure"},{"location":"reference/starlite_saqlalchemy/health/#starlite_saqlalchemy.health.health_check","text":"health_check ( db_session ) Check database available and returns app config info.","title":"health_check()"},{"location":"reference/starlite_saqlalchemy/http/","text":"Async HTTP request client implementation built on httpx . Client \u00b6 Base class for HTTP clients. client = Client () response = await client . request ( \"GET\" , \"/some/resource\" ) assert response . status_code == 200 close classmethod async \u00b6 close () Closes the underlying client transport and proxies. json \u00b6 json ( response ) Abstracts deserializing to allow for optional unwrapping of server response, e.g., {\"data\": []} . Parameters \u00b6 httpx.Response Response object, we call .json() on it. Returns \u00b6 Any The result of httpx.Response.json() after passing through self.unwrap_json() . request async \u00b6 request ( * args , ** kwargs ) Passes *args , **kwargs straight through to httpx.AsyncClient.request , we call raise_for_status() on the response and wrap any HTTPX error in a ClientException . Parameters \u00b6 args : Any Unpacked into httpx.AsyncClient.request() . *kwargs : Any Unpacked into httpx.AsyncClient.request() . Returns \u00b6 httpx.Response Return value of httpx.AsyncClient.request() after calling httpx.Response.raise_for_status() Raises \u00b6 ClientException Wraps any httpx.HTTPError arising from the request or response status check. unwrap_json staticmethod \u00b6 unwrap_json ( data ) Overwrite this method for pre-processing response data, for example unwrapping enveloped data. Parameters \u00b6 Any Value returned from response.json() . Returns \u00b6 Any Pre-processed data, default is pass-through/no-op. ClientException \u00b6 Bases: Exception Base client exception.","title":"http"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client","text":"Base class for HTTP clients. client = Client () response = await client . request ( \"GET\" , \"/some/resource\" ) assert response . status_code == 200","title":"Client"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.close","text":"close () Closes the underlying client transport and proxies.","title":"close()"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.json","text":"json ( response ) Abstracts deserializing to allow for optional unwrapping of server response, e.g., {\"data\": []} .","title":"json()"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.json--parameters","text":"httpx.Response Response object, we call .json() on it.","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.json--returns","text":"Any The result of httpx.Response.json() after passing through self.unwrap_json() .","title":"Returns"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.request","text":"request ( * args , ** kwargs ) Passes *args , **kwargs straight through to httpx.AsyncClient.request , we call raise_for_status() on the response and wrap any HTTPX error in a ClientException .","title":"request()"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.request--parameters","text":"args : Any Unpacked into httpx.AsyncClient.request() . *kwargs : Any Unpacked into httpx.AsyncClient.request() .","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.request--returns","text":"httpx.Response Return value of httpx.AsyncClient.request() after calling httpx.Response.raise_for_status()","title":"Returns"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.request--raises","text":"ClientException Wraps any httpx.HTTPError arising from the request or response status check.","title":"Raises"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.unwrap_json","text":"unwrap_json ( data ) Overwrite this method for pre-processing response data, for example unwrapping enveloped data.","title":"unwrap_json()"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.unwrap_json--parameters","text":"Any Value returned from response.json() .","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.Client.unwrap_json--returns","text":"Any Pre-processed data, default is pass-through/no-op.","title":"Returns"},{"location":"reference/starlite_saqlalchemy/http/#starlite_saqlalchemy.http.ClientException","text":"Bases: Exception Base client exception.","title":"ClientException"},{"location":"reference/starlite_saqlalchemy/init_plugin/","text":"The application configuration plugin and config object. Example from starlite import Starlite , get from starlite_saqlalchemy import ConfigureApp @get ( \"/example\" ) def example_handler () -> dict : return { \"hello\" : \"world\" } app = Starlite ( route_handlers = [ example_handler ], on_app_init = [ ConfigureApp ()]) The plugin can be configured by passing an instance of PluginConfig to ConfigureApp on instantiation app = Starlite ( route_handlers = [ example_handler ], on_app_init [ ConfigureApp ( PluginConfig ( do_openapi = False ))], ) The PluginConfig has switches to disable every aspect of the plugin behavior. ConfigureApp \u00b6 ConfigureApp ( config = PluginConfig ()) Starlite application configuration. Parameters: Name Type Description Default config PluginConfig Provide a config object to customize the behavior of the plugin. PluginConfig() __call__ \u00b6 __call__ ( app_config ) Entrypoint to the app config plugin. Receives the AppConfig object and modifies it. Parameters: Name Type Description Default app_config AppConfig Passed to the plugin from the Starlite instance on instantiation. required Returns: Type Description AppConfig The modified AppConfig object. configure_after_exception \u00b6 configure_after_exception ( app_config ) Add the logging after exception hook handler. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_cache \u00b6 configure_cache ( app_config ) Configure the application cache. We only overwrite if DEFAULT_CACHE_CONFIG is the standing configuration object. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_collection_dependencies \u00b6 configure_collection_dependencies ( app_config ) Add the required Provide instances to the app dependency mapping. If a dependency has already been provided with the same key we do not overwrite it. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_compression \u00b6 configure_compression ( app_config ) Configure application compression. No-op if AppConfig.compression_config has already been set. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_exception_handlers \u00b6 configure_exception_handlers ( app_config ) Add the handlers that translate service and repository exceptions into HTTP exceptions. Does not overwrite handlers that may already exist for the exception types. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_health_check \u00b6 configure_health_check ( app_config ) Adds the health check controller. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_logging \u00b6 configure_logging ( app_config ) Configures application logging if it has not already been configured. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_openapi \u00b6 configure_openapi ( app_config ) Configures the OpenAPI docs if they have not already been configured. We only overwrite if DEFAULT_OPENAPI_CONFIG is the standing configuration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_response_class \u00b6 configure_response_class ( app_config ) Add the custom response class. No-op if the AppConfig.response_class is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_sentry \u00b6 configure_sentry ( app_config ) Add handler to configure Sentry integration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_sqlalchemy_plugin \u00b6 configure_sqlalchemy_plugin ( app_config ) Configure SQLAlchemy for the application. Adds a configured SQLAlchemyPlugin to AppConfig.plugins . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_static_files \u00b6 configure_static_files ( app_config ) Configure static files for the application. No-op if AppConfig.static_files_config is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required configure_worker \u00b6 configure_worker ( app_config ) Configure the SAQ async worker. No-op if there are no worker functions set on PluginConfig . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required PluginConfig \u00b6 Bases: BaseModel Configure behavior of the ConfigureApp object. Each feature that the plugin enables can be toggled with the do_<behavior> switch, e.g., PluginConfig(do_after_exception=False) will tell ConfigureApp not to add the after exception logging hook handler to the application. do_after_exception class-attribute \u00b6 do_after_exception : bool = True Add the hook handler to AppConfig.after_exception . do_cache class-attribute \u00b6 do_cache : bool = True Add configuration for the redis-backed cache to AppConfig.cache_config . do_collection_dependencies class-attribute \u00b6 do_collection_dependencies = True Add the Provide 's for collection route dependencies to AppConfig.dependencies . do_compression class-attribute \u00b6 do_compression : bool = True Add configuration for gzip compression to AppConfig.compression_config . do_exception_handlers class-attribute \u00b6 do_exception_handlers : bool = True Add the repository/service exception http translation handlers to AppConfig.exception_handlers . do_health_check class-attribute \u00b6 do_health_check : bool = True Add the health check controller to AppConfig.route_handlers . do_logging class-attribute \u00b6 do_logging : bool = True Set the logging configuration object to AppConfig.logging_config . do_openapi class-attribute \u00b6 do_openapi : bool = True Set the OpenAPI config object to AppConfig.openapi_config . do_response_class class-attribute \u00b6 do_response_class : bool = True Set the custom response class to AppConfig.response_class . do_sentry class-attribute \u00b6 do_sentry : bool = True Configure the application to initialize Sentry on startup. Adds a handler to AppConfig.on_startup . do_sqlalchemy_plugin class-attribute \u00b6 do_sqlalchemy_plugin : bool = True Set the SQLAlchemy plugin on the application. Adds the plugin to AppConfig.plugins . do_static_files class-attribute \u00b6 do_static_files : bool = True Set the static files config object to AppConfig.static_files_config . do_worker class-attribute \u00b6 do_worker : bool = True Configure the async worker on the application. This action instantiates a worker instance and sets handlers for AppConfig.on_startup and AppConfig.on_shutdown that manage the lifecycle of the SAQ worker. worker_functions class-attribute \u00b6 worker_functions : list [ WorkerFunction | tuple [ str , WorkerFunction ]] = [] Queue worker functions.","title":"init_plugin"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp","text":"ConfigureApp ( config = PluginConfig ()) Starlite application configuration. Parameters: Name Type Description Default config PluginConfig Provide a config object to customize the behavior of the plugin. PluginConfig()","title":"ConfigureApp"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.__call__","text":"__call__ ( app_config ) Entrypoint to the app config plugin. Receives the AppConfig object and modifies it. Parameters: Name Type Description Default app_config AppConfig Passed to the plugin from the Starlite instance on instantiation. required Returns: Type Description AppConfig The modified AppConfig object.","title":"__call__()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_after_exception","text":"configure_after_exception ( app_config ) Add the logging after exception hook handler. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_after_exception()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_cache","text":"configure_cache ( app_config ) Configure the application cache. We only overwrite if DEFAULT_CACHE_CONFIG is the standing configuration object. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_cache()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_collection_dependencies","text":"configure_collection_dependencies ( app_config ) Add the required Provide instances to the app dependency mapping. If a dependency has already been provided with the same key we do not overwrite it. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_collection_dependencies()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_compression","text":"configure_compression ( app_config ) Configure application compression. No-op if AppConfig.compression_config has already been set. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_compression()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_exception_handlers","text":"configure_exception_handlers ( app_config ) Add the handlers that translate service and repository exceptions into HTTP exceptions. Does not overwrite handlers that may already exist for the exception types. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_exception_handlers()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_health_check","text":"configure_health_check ( app_config ) Adds the health check controller. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_health_check()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_logging","text":"configure_logging ( app_config ) Configures application logging if it has not already been configured. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_logging()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_openapi","text":"configure_openapi ( app_config ) Configures the OpenAPI docs if they have not already been configured. We only overwrite if DEFAULT_OPENAPI_CONFIG is the standing configuration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_openapi()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_response_class","text":"configure_response_class ( app_config ) Add the custom response class. No-op if the AppConfig.response_class is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_response_class()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_sentry","text":"configure_sentry ( app_config ) Add handler to configure Sentry integration. Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_sentry()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_sqlalchemy_plugin","text":"configure_sqlalchemy_plugin ( app_config ) Configure SQLAlchemy for the application. Adds a configured SQLAlchemyPlugin to AppConfig.plugins . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_sqlalchemy_plugin()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_static_files","text":"configure_static_files ( app_config ) Configure static files for the application. No-op if AppConfig.static_files_config is not None . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_static_files()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.ConfigureApp.configure_worker","text":"configure_worker ( app_config ) Configure the SAQ async worker. No-op if there are no worker functions set on PluginConfig . Parameters: Name Type Description Default app_config AppConfig The Starlite application config object. required","title":"configure_worker()"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig","text":"Bases: BaseModel Configure behavior of the ConfigureApp object. Each feature that the plugin enables can be toggled with the do_<behavior> switch, e.g., PluginConfig(do_after_exception=False) will tell ConfigureApp not to add the after exception logging hook handler to the application.","title":"PluginConfig"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_after_exception","text":"do_after_exception : bool = True Add the hook handler to AppConfig.after_exception .","title":"do_after_exception"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_cache","text":"do_cache : bool = True Add configuration for the redis-backed cache to AppConfig.cache_config .","title":"do_cache"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_collection_dependencies","text":"do_collection_dependencies = True Add the Provide 's for collection route dependencies to AppConfig.dependencies .","title":"do_collection_dependencies"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_compression","text":"do_compression : bool = True Add configuration for gzip compression to AppConfig.compression_config .","title":"do_compression"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_exception_handlers","text":"do_exception_handlers : bool = True Add the repository/service exception http translation handlers to AppConfig.exception_handlers .","title":"do_exception_handlers"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_health_check","text":"do_health_check : bool = True Add the health check controller to AppConfig.route_handlers .","title":"do_health_check"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_logging","text":"do_logging : bool = True Set the logging configuration object to AppConfig.logging_config .","title":"do_logging"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_openapi","text":"do_openapi : bool = True Set the OpenAPI config object to AppConfig.openapi_config .","title":"do_openapi"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_response_class","text":"do_response_class : bool = True Set the custom response class to AppConfig.response_class .","title":"do_response_class"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_sentry","text":"do_sentry : bool = True Configure the application to initialize Sentry on startup. Adds a handler to AppConfig.on_startup .","title":"do_sentry"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_sqlalchemy_plugin","text":"do_sqlalchemy_plugin : bool = True Set the SQLAlchemy plugin on the application. Adds the plugin to AppConfig.plugins .","title":"do_sqlalchemy_plugin"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_static_files","text":"do_static_files : bool = True Set the static files config object to AppConfig.static_files_config .","title":"do_static_files"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.do_worker","text":"do_worker : bool = True Configure the async worker on the application. This action instantiates a worker instance and sets handlers for AppConfig.on_startup and AppConfig.on_shutdown that manage the lifecycle of the SAQ worker.","title":"do_worker"},{"location":"reference/starlite_saqlalchemy/init_plugin/#starlite_saqlalchemy.init_plugin.PluginConfig.worker_functions","text":"worker_functions : list [ WorkerFunction | tuple [ str , WorkerFunction ]] = [] Queue worker functions.","title":"worker_functions"},{"location":"reference/starlite_saqlalchemy/logging/","text":"Logging config for the application. Ensures that the app, sqlalchemy, saq and uvicorn loggers all log through the queue listener. Adds a filter for health check route logs. config module-attribute \u00b6 config = LoggingConfig ( root = { \"level\" : settings . app . LOG_LEVEL , \"handlers\" : [ \"queue_listener\" ]}, filters = { \"health_filter\" : { \"()\" : AccessLogFilter , \"path_re\" : f \"^ { settings . api . HEALTH_PATH } $\" }}, formatters = { \"standard\" : { \"format\" : \" %(asctime)s loglevel= %(levelname)-6s logger= %(name)s %(funcName)s () L %(lineno)-4d %(message)s \" } }, loggers = { \"uvicorn.access\" : { \"propagate\" : False , \"filters\" : [ \"health_filter\" ], \"handlers\" : [ \"queue_listener\" ], }, \"uvicorn.error\" : { \"propagate\" : False , \"handlers\" : [ \"queue_listener\" ]}, \"saq\" : { \"propagate\" : False , \"handlers\" : [ \"queue_listener\" ]}, \"sqlalchemy.engine\" : { \"propagate\" : False , \"handlers\" : [ \"queue_listener\" ]}, }, ) Pre-configured log config for application. AccessLogFilter \u00b6 AccessLogFilter ( * args , path_re , ** kwargs ) Bases: logging . Filter Filter for omitting log records from uvicorn access logs based on request path. Parameters \u00b6 *args : Any Unpacked into logging.Filter.__init__() . str Regex, paths matched are filtered. **kwargs : Any Unpacked into logging.Filter.__init__() .","title":"logging"},{"location":"reference/starlite_saqlalchemy/logging/#starlite_saqlalchemy.logging.config","text":"config = LoggingConfig ( root = { \"level\" : settings . app . LOG_LEVEL , \"handlers\" : [ \"queue_listener\" ]}, filters = { \"health_filter\" : { \"()\" : AccessLogFilter , \"path_re\" : f \"^ { settings . api . HEALTH_PATH } $\" }}, formatters = { \"standard\" : { \"format\" : \" %(asctime)s loglevel= %(levelname)-6s logger= %(name)s %(funcName)s () L %(lineno)-4d %(message)s \" } }, loggers = { \"uvicorn.access\" : { \"propagate\" : False , \"filters\" : [ \"health_filter\" ], \"handlers\" : [ \"queue_listener\" ], }, \"uvicorn.error\" : { \"propagate\" : False , \"handlers\" : [ \"queue_listener\" ]}, \"saq\" : { \"propagate\" : False , \"handlers\" : [ \"queue_listener\" ]}, \"sqlalchemy.engine\" : { \"propagate\" : False , \"handlers\" : [ \"queue_listener\" ]}, }, ) Pre-configured log config for application.","title":"config"},{"location":"reference/starlite_saqlalchemy/logging/#starlite_saqlalchemy.logging.AccessLogFilter","text":"AccessLogFilter ( * args , path_re , ** kwargs ) Bases: logging . Filter Filter for omitting log records from uvicorn access logs based on request path.","title":"AccessLogFilter"},{"location":"reference/starlite_saqlalchemy/logging/#starlite_saqlalchemy.logging.AccessLogFilter--parameters","text":"*args : Any Unpacked into logging.Filter.__init__() . str Regex, paths matched are filtered. **kwargs : Any Unpacked into logging.Filter.__init__() .","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/openapi/","text":"Application OpenAPI config. config module-attribute \u00b6 config = OpenAPIConfig ( title = settings . openapi . TITLE or settings . app . NAME , version = settings . openapi . VERSION , contact = Contact ( name = settings . openapi . CONTACT_NAME , email = settings . openapi . CONTACT_EMAIL ), use_handler_docstrings = True , ) OpenAPI config for app, see OpenAPISettings","title":"openapi"},{"location":"reference/starlite_saqlalchemy/openapi/#starlite_saqlalchemy.openapi.config","text":"config = OpenAPIConfig ( title = settings . openapi . TITLE or settings . app . NAME , version = settings . openapi . VERSION , contact = Contact ( name = settings . openapi . CONTACT_NAME , email = settings . openapi . CONTACT_EMAIL ), use_handler_docstrings = True , ) OpenAPI config for app, see OpenAPISettings","title":"config"},{"location":"reference/starlite_saqlalchemy/orm/","text":"Application ORM configuration. convention module-attribute \u00b6 convention = { \"ix\" : \"ix_ %(column_0_label)s \" , \"uq\" : \"uq_ %(table_name)s _ %(column_0_name)s \" , \"ck\" : \"ck_ %(table_name)s _ %(constraint_name)s \" , \"fk\" : \"fk_ %(table_name)s _ %(column_0_name)s _ %(referred_table_name)s \" , \"pk\" : \"pk_ %(table_name)s \" , } Templates for automated constraint name generation. Base \u00b6 Bases: DeclarativeBase Base for all SQLAlchemy declarative models. Attributes \u00b6 Mapped[datetime] Date/time of instance creation. Mapped[datetime] Date/time of last instance update. from_dto classmethod \u00b6 from_dto ( dto_instance ) Construct an instance of the SQLAlchemy model from the Pydantic DTO. Parameters: Name Type Description Default dto_instance BaseModel A pydantic model required Returns: Type Description BaseT An instance of the SQLAlchemy model. touch_updated_timestamp \u00b6 touch_updated_timestamp ( session , * _ ) Called from SQLAlchemy's. before_flush event to bump the updated timestamp on modified instances. Parameters \u00b6 Session The sync Session instance that underlies the async session.","title":"orm"},{"location":"reference/starlite_saqlalchemy/orm/#starlite_saqlalchemy.orm.convention","text":"convention = { \"ix\" : \"ix_ %(column_0_label)s \" , \"uq\" : \"uq_ %(table_name)s _ %(column_0_name)s \" , \"ck\" : \"ck_ %(table_name)s _ %(constraint_name)s \" , \"fk\" : \"fk_ %(table_name)s _ %(column_0_name)s _ %(referred_table_name)s \" , \"pk\" : \"pk_ %(table_name)s \" , } Templates for automated constraint name generation.","title":"convention"},{"location":"reference/starlite_saqlalchemy/orm/#starlite_saqlalchemy.orm.Base","text":"Bases: DeclarativeBase Base for all SQLAlchemy declarative models.","title":"Base"},{"location":"reference/starlite_saqlalchemy/orm/#starlite_saqlalchemy.orm.Base--attributes","text":"Mapped[datetime] Date/time of instance creation. Mapped[datetime] Date/time of last instance update.","title":"Attributes"},{"location":"reference/starlite_saqlalchemy/orm/#starlite_saqlalchemy.orm.Base.from_dto","text":"from_dto ( dto_instance ) Construct an instance of the SQLAlchemy model from the Pydantic DTO. Parameters: Name Type Description Default dto_instance BaseModel A pydantic model required Returns: Type Description BaseT An instance of the SQLAlchemy model.","title":"from_dto()"},{"location":"reference/starlite_saqlalchemy/orm/#starlite_saqlalchemy.orm.touch_updated_timestamp","text":"touch_updated_timestamp ( session , * _ ) Called from SQLAlchemy's. before_flush event to bump the updated timestamp on modified instances.","title":"touch_updated_timestamp()"},{"location":"reference/starlite_saqlalchemy/orm/#starlite_saqlalchemy.orm.touch_updated_timestamp--parameters","text":"Session The sync Session instance that underlies the async session.","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/redis/","text":"Application redis instance. client module-attribute \u00b6 client = Redis . from_url ( settings . redis . URL ) Async Redis instance, configure via CacheSettings .","title":"redis"},{"location":"reference/starlite_saqlalchemy/redis/#starlite_saqlalchemy.redis.client","text":"client = Redis . from_url ( settings . redis . URL ) Async Redis instance, configure via CacheSettings .","title":"client"},{"location":"reference/starlite_saqlalchemy/response/","text":"Custom response class for the application that handles serialization of pg UUID values. Response \u00b6 Bases: _Response Custom starlite.Response that handles serialization of the postgres UUID type used by SQLAlchemy. serializer staticmethod \u00b6 serializer ( value ) Serializes value . Parameters \u00b6 Any The thing to be serialized. Returns \u00b6 Any Serialized representation of value .","title":"response"},{"location":"reference/starlite_saqlalchemy/response/#starlite_saqlalchemy.response.Response","text":"Bases: _Response Custom starlite.Response that handles serialization of the postgres UUID type used by SQLAlchemy.","title":"Response"},{"location":"reference/starlite_saqlalchemy/response/#starlite_saqlalchemy.response.Response.serializer","text":"serializer ( value ) Serializes value .","title":"serializer()"},{"location":"reference/starlite_saqlalchemy/response/#starlite_saqlalchemy.response.Response.serializer--parameters","text":"Any The thing to be serialized.","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/response/#starlite_saqlalchemy.response.Response.serializer--returns","text":"Any Serialized representation of value .","title":"Returns"},{"location":"reference/starlite_saqlalchemy/sentry/","text":"Sentry config for our application. The current support for sentry is limited, but still worth having. See: https://github.com/getsentry/sentry-python/issues/1549 configure \u00b6 configure () Callback to configure sentry on app startup. See SentrySettings .","title":"sentry"},{"location":"reference/starlite_saqlalchemy/sentry/#starlite_saqlalchemy.sentry.configure","text":"configure () Callback to configure sentry on app startup. See SentrySettings .","title":"configure()"},{"location":"reference/starlite_saqlalchemy/service/","text":"A generic service object implementation. Service object is generic on the domain model type, which should be a SQLAlchemy model. Operation \u00b6 Bases: str , Enum Operation type markers sent with callbacks. Service \u00b6 Service ( session ) Bases: Generic [ ModelT ] Generic Service object. Parameters: Name Type Description Default repository Instance conforming to AbstractRepository interface. required __init_subclass__ \u00b6 __init_subclass__ ( * args , ** kwargs ) Create and cache a DTO instance that is internal use only. note This pattern could be changed to on first access, rather than at compile time. authorize_create async \u00b6 authorize_create ( data ) Control resource creation. Can use self.user here. Parameters: Name Type Description Default data ModelT The object to be created. required Returns: Type Description ModelT The object with restricted attribute values removed. authorize_delete async \u00b6 authorize_delete ( id_ ) Authorize delete of item. Parameters: Name Type Description Default id_ Any Identifier of item to be retrieved. required authorize_get async \u00b6 authorize_get ( id_ ) Authorize get of item. Parameters: Name Type Description Default id_ Any Identifier of item to be retrieved. required authorize_list async \u00b6 authorize_list () Authorize collection access. authorize_update async \u00b6 authorize_update ( id_ , data ) Authorize update of item. Parameters: Name Type Description Default id_ Any Identifier of the object to be updated. required data ModelT The object to be updated. required Returns: Type Description ModelT ModelT authorize_upsert async \u00b6 authorize_upsert ( id_ , data ) Authorize upsert of item. Parameters: Name Type Description Default id_ Any The identifier of the resource to upsert. required data ModelT The object to be updated. required Returns: Type Description ModelT ModelT create async \u00b6 create ( data ) Wraps repository instance creation. Parameters: Name Type Description Default data ModelT Representation to be created. required Returns: Type Description ModelT Representation of created instance. delete async \u00b6 delete ( id_ ) Wraps repository delete operation. Parameters: Name Type Description Default id_ Any Identifier of instance to be deleted. required Returns: Type Description ModelT Representation of the deleted instance. enqueue_callback async \u00b6 enqueue_callback ( operation , data ) Enqueue an async callback for the operation and data. Parameters: Name Type Description Default operation Operation Operation performed on data. required data ModelT The data for the operation. required get async \u00b6 get ( id_ ) Wraps repository scalar operation. Parameters: Name Type Description Default id_ Any Identifier of instance to be retrieved. required Returns: Type Description ModelT Representation of instance with identifier id_ . list async \u00b6 list ( * filters , ** kwargs ) Wraps repository scalars operation. Parameters: Name Type Description Default *filters FilterTypes Collection route filters. () **kwargs Any Keyword arguments for attribute based filtering. {} Returns: Type Description list [ ModelT ] The list of instances retrieved from the repository. receive_callback async \u00b6 receive_callback ( operation , raw_obj ) Method called by the async workers. Do what you want in here but remember not to block the loop. Parameters: Name Type Description Default operation Operation Operation performed on the object. required raw_obj dict [ str , Any ] Raw representation of the object. required update async \u00b6 update ( id_ , data ) Wraps repository update operation. Parameters: Name Type Description Default id_ Any Identifier of item to be updated. required data ModelT Representation to be updated. required Returns: Type Description ModelT Updated representation. upsert async \u00b6 upsert ( id_ , data ) Wraps repository upsert operation. Parameters: Name Type Description Default id_ Any Identifier of the object for upsert. required data ModelT Representation for upsert. required Returns: Type Description ModelT Updated or created representation. ServiceException \u00b6 Bases: Exception Base class for Service related exceptions. UnauthorizedException \u00b6 Bases: ServiceException A user tried to do something they shouldn't have. make_service_callback async \u00b6 make_service_callback ( _ctx , * , service_module_name , service_type_fqdn , operation , raw_obj ) Function that makes the async service callbacks. Parameters: Name Type Description Default _ctx dict the SAQ context required service_module_name str Module of service type to instantiate. required service_type_fqdn str Reference to service type in module. required operation Operation Operation performed on the instance. required raw_obj dict [ str , Any ] Data received from the work queue. required","title":"service"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Operation","text":"Bases: str , Enum Operation type markers sent with callbacks.","title":"Operation"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service","text":"Service ( session ) Bases: Generic [ ModelT ] Generic Service object. Parameters: Name Type Description Default repository Instance conforming to AbstractRepository interface. required","title":"Service"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.__init_subclass__","text":"__init_subclass__ ( * args , ** kwargs ) Create and cache a DTO instance that is internal use only. note This pattern could be changed to on first access, rather than at compile time.","title":"__init_subclass__()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.authorize_create","text":"authorize_create ( data ) Control resource creation. Can use self.user here. Parameters: Name Type Description Default data ModelT The object to be created. required Returns: Type Description ModelT The object with restricted attribute values removed.","title":"authorize_create()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.authorize_delete","text":"authorize_delete ( id_ ) Authorize delete of item. Parameters: Name Type Description Default id_ Any Identifier of item to be retrieved. required","title":"authorize_delete()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.authorize_get","text":"authorize_get ( id_ ) Authorize get of item. Parameters: Name Type Description Default id_ Any Identifier of item to be retrieved. required","title":"authorize_get()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.authorize_list","text":"authorize_list () Authorize collection access.","title":"authorize_list()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.authorize_update","text":"authorize_update ( id_ , data ) Authorize update of item. Parameters: Name Type Description Default id_ Any Identifier of the object to be updated. required data ModelT The object to be updated. required Returns: Type Description ModelT ModelT","title":"authorize_update()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.authorize_upsert","text":"authorize_upsert ( id_ , data ) Authorize upsert of item. Parameters: Name Type Description Default id_ Any The identifier of the resource to upsert. required data ModelT The object to be updated. required Returns: Type Description ModelT ModelT","title":"authorize_upsert()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.create","text":"create ( data ) Wraps repository instance creation. Parameters: Name Type Description Default data ModelT Representation to be created. required Returns: Type Description ModelT Representation of created instance.","title":"create()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.delete","text":"delete ( id_ ) Wraps repository delete operation. Parameters: Name Type Description Default id_ Any Identifier of instance to be deleted. required Returns: Type Description ModelT Representation of the deleted instance.","title":"delete()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.enqueue_callback","text":"enqueue_callback ( operation , data ) Enqueue an async callback for the operation and data. Parameters: Name Type Description Default operation Operation Operation performed on data. required data ModelT The data for the operation. required","title":"enqueue_callback()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.get","text":"get ( id_ ) Wraps repository scalar operation. Parameters: Name Type Description Default id_ Any Identifier of instance to be retrieved. required Returns: Type Description ModelT Representation of instance with identifier id_ .","title":"get()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.list","text":"list ( * filters , ** kwargs ) Wraps repository scalars operation. Parameters: Name Type Description Default *filters FilterTypes Collection route filters. () **kwargs Any Keyword arguments for attribute based filtering. {} Returns: Type Description list [ ModelT ] The list of instances retrieved from the repository.","title":"list()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.receive_callback","text":"receive_callback ( operation , raw_obj ) Method called by the async workers. Do what you want in here but remember not to block the loop. Parameters: Name Type Description Default operation Operation Operation performed on the object. required raw_obj dict [ str , Any ] Raw representation of the object. required","title":"receive_callback()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.update","text":"update ( id_ , data ) Wraps repository update operation. Parameters: Name Type Description Default id_ Any Identifier of item to be updated. required data ModelT Representation to be updated. required Returns: Type Description ModelT Updated representation.","title":"update()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.Service.upsert","text":"upsert ( id_ , data ) Wraps repository upsert operation. Parameters: Name Type Description Default id_ Any Identifier of the object for upsert. required data ModelT Representation for upsert. required Returns: Type Description ModelT Updated or created representation.","title":"upsert()"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.ServiceException","text":"Bases: Exception Base class for Service related exceptions.","title":"ServiceException"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.UnauthorizedException","text":"Bases: ServiceException A user tried to do something they shouldn't have.","title":"UnauthorizedException"},{"location":"reference/starlite_saqlalchemy/service/#starlite_saqlalchemy.service.make_service_callback","text":"make_service_callback ( _ctx , * , service_module_name , service_type_fqdn , operation , raw_obj ) Function that makes the async service callbacks. Parameters: Name Type Description Default _ctx dict the SAQ context required service_module_name str Module of service type to instantiate. required service_type_fqdn str Reference to service type in module. required operation Operation Operation performed on the instance. required raw_obj dict [ str , Any ] Data received from the work queue. required","title":"make_service_callback()"},{"location":"reference/starlite_saqlalchemy/settings/","text":"All configuration via environment. Take note of the environment variable prefixes required for each settings class, except AppSettings . APISettings \u00b6 Bases: BaseSettings API specific configuration. Prefix all environment variables with API_ , e.g., API_CACHE_EXPIRATION . Attributes \u00b6 int Default cache key expiration in seconds. int Max records received for collection routes. AppSettings \u00b6 Bases: BaseSettings Generic application settings. These settings are returned as json by the healthcheck endpoint, so do not include any sensitive values here, or if you do ensure to exclude them from serialization in the Config object. Attributes \u00b6 str Identity of the CI build of current app instance. bool If True runs Starlite in debug mode. str \"dev\", \"prod\", etc. str Stdlib log level names, \"DEBUG\", \"INFO\", etc. str App name. slug property \u00b6 slug () A slugified name. Returns \u00b6 str self.NAME , all lowercase and hyphens instead of spaces. DatabaseSettings \u00b6 Bases: BaseSettings Configures the database for the application. Prefix all environment variables with DB_ , e.g., DB_URL . Attributes \u00b6 bool Enables SQLAlchemy engine logs. PostgresDsn URL for database connection. OpenAPISettings \u00b6 Bases: BaseSettings Configures OpenAPI for the application. Prefix all environment variables with OPENAPI_ , e.g., OPENAPI_TITLE . Attributes \u00b6 str OpenAPI document title. str OpenAPI document version. str OpenAPI document contact name. str OpenAPI document contact email. RedisSettings \u00b6 Bases: BaseSettings Cache settings for the application. Prefix all environment variables with REDIS_ , e.g., REDIS_URL . Attributes \u00b6 AnyUrl A redis connection URL. SentrySettings \u00b6 Bases: BaseSettings Configures sentry for the application. Attributes \u00b6 str The sentry DSN. Set as empty string to disable sentry reporting. float % of requests traced by sentry, 0.0 means none, 1.0 means all.","title":"settings"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.APISettings","text":"Bases: BaseSettings API specific configuration. Prefix all environment variables with API_ , e.g., API_CACHE_EXPIRATION .","title":"APISettings"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.APISettings--attributes","text":"int Default cache key expiration in seconds. int Max records received for collection routes.","title":"Attributes"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.AppSettings","text":"Bases: BaseSettings Generic application settings. These settings are returned as json by the healthcheck endpoint, so do not include any sensitive values here, or if you do ensure to exclude them from serialization in the Config object.","title":"AppSettings"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.AppSettings--attributes","text":"str Identity of the CI build of current app instance. bool If True runs Starlite in debug mode. str \"dev\", \"prod\", etc. str Stdlib log level names, \"DEBUG\", \"INFO\", etc. str App name.","title":"Attributes"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.AppSettings.slug","text":"slug () A slugified name.","title":"slug()"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.AppSettings.slug--returns","text":"str self.NAME , all lowercase and hyphens instead of spaces.","title":"Returns"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.DatabaseSettings","text":"Bases: BaseSettings Configures the database for the application. Prefix all environment variables with DB_ , e.g., DB_URL .","title":"DatabaseSettings"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.DatabaseSettings--attributes","text":"bool Enables SQLAlchemy engine logs. PostgresDsn URL for database connection.","title":"Attributes"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.OpenAPISettings","text":"Bases: BaseSettings Configures OpenAPI for the application. Prefix all environment variables with OPENAPI_ , e.g., OPENAPI_TITLE .","title":"OpenAPISettings"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.OpenAPISettings--attributes","text":"str OpenAPI document title. str OpenAPI document version. str OpenAPI document contact name. str OpenAPI document contact email.","title":"Attributes"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.RedisSettings","text":"Bases: BaseSettings Cache settings for the application. Prefix all environment variables with REDIS_ , e.g., REDIS_URL .","title":"RedisSettings"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.RedisSettings--attributes","text":"AnyUrl A redis connection URL.","title":"Attributes"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.SentrySettings","text":"Bases: BaseSettings Configures sentry for the application.","title":"SentrySettings"},{"location":"reference/starlite_saqlalchemy/settings/#starlite_saqlalchemy.settings.SentrySettings--attributes","text":"str The sentry DSN. Set as empty string to disable sentry reporting. float % of requests traced by sentry, 0.0 means none, 1.0 means all.","title":"Attributes"},{"location":"reference/starlite_saqlalchemy/sqlalchemy_plugin/","text":"Database connectivity and transaction management for the application. async_session_factory module-attribute \u00b6 async_session_factory : async_sessionmaker [ AsyncSession ] = async_sessionmaker ( engine ) Database session factory. See async_sessionmaker() . engine module-attribute \u00b6 engine = create_async_engine ( settings . db . URL , echo = settings . db . ECHO , echo_pool = settings . db . ECHO_POOL , json_serializer = partial ( dumps , default = _default ), max_overflow = settings . db . POOL_MAX_OVERFLOW , pool_size = settings . db . POOL_SIZE , pool_timeout = settings . db . POOL_TIMEOUT , poolclass = NullPool if settings . db . POOL_DISABLE else None , ) Configure via DatabaseSettings . Overrides default JSON serializer to use orjson . See create_async_engine() for detailed instructions. before_send_handler async \u00b6 before_send_handler ( message , _ , scope ) Custom before_send_handler for SQLAlchemy plugin that inspects the status of response and commits, or rolls back the database. Parameters: Name Type Description Default message Message ASGI message required _ State required scope Scope ASGI scope required","title":"sqlalchemy_plugin"},{"location":"reference/starlite_saqlalchemy/sqlalchemy_plugin/#starlite_saqlalchemy.sqlalchemy_plugin.async_session_factory","text":"async_session_factory : async_sessionmaker [ AsyncSession ] = async_sessionmaker ( engine ) Database session factory. See async_sessionmaker() .","title":"async_session_factory"},{"location":"reference/starlite_saqlalchemy/sqlalchemy_plugin/#starlite_saqlalchemy.sqlalchemy_plugin.engine","text":"engine = create_async_engine ( settings . db . URL , echo = settings . db . ECHO , echo_pool = settings . db . ECHO_POOL , json_serializer = partial ( dumps , default = _default ), max_overflow = settings . db . POOL_MAX_OVERFLOW , pool_size = settings . db . POOL_SIZE , pool_timeout = settings . db . POOL_TIMEOUT , poolclass = NullPool if settings . db . POOL_DISABLE else None , ) Configure via DatabaseSettings . Overrides default JSON serializer to use orjson . See create_async_engine() for detailed instructions.","title":"engine"},{"location":"reference/starlite_saqlalchemy/sqlalchemy_plugin/#starlite_saqlalchemy.sqlalchemy_plugin.before_send_handler","text":"before_send_handler ( message , _ , scope ) Custom before_send_handler for SQLAlchemy plugin that inspects the status of response and commits, or rolls back the database. Parameters: Name Type Description Default message Message ASGI message required _ State required scope Scope ASGI scope required","title":"before_send_handler()"},{"location":"reference/starlite_saqlalchemy/static_files/","text":"Static file service configuration for the application.","title":"static_files"},{"location":"reference/starlite_saqlalchemy/worker/","text":"SAQ worker and queue. queue module-attribute \u00b6 queue = Queue ( redis . client ) Queue instance instantiated with redis instance. Queue \u00b6 Queue ( * args , ** kwargs ) Bases: saq . Queue SAQ Queue Configures orjson for JSON serialization/deserialization if not otherwise configured. Parameters \u00b6 args : Any Passed through to saq.Queue.__init__() *kwargs : Any Passed through to saq.Queue.__init__() Worker \u00b6 Bases: saq . Worker Modify behavior of saq worker for orchestration by Starlite. on_app_startup async \u00b6 on_app_startup () Attach the worker to the running event loop. create_worker_instance \u00b6 create_worker_instance ( functions ) Parameters: Name Type Description Default functions abc . Collection [ WorkerFunction | tuple [ str , WorkerFunction ]] Functions to be called via the async workers. required Returns: Type Description Worker The worker instance, instantiated with functions .","title":"worker"},{"location":"reference/starlite_saqlalchemy/worker/#starlite_saqlalchemy.worker.queue","text":"queue = Queue ( redis . client ) Queue instance instantiated with redis instance.","title":"queue"},{"location":"reference/starlite_saqlalchemy/worker/#starlite_saqlalchemy.worker.Queue","text":"Queue ( * args , ** kwargs ) Bases: saq . Queue SAQ Queue Configures orjson for JSON serialization/deserialization if not otherwise configured.","title":"Queue"},{"location":"reference/starlite_saqlalchemy/worker/#starlite_saqlalchemy.worker.Queue--parameters","text":"args : Any Passed through to saq.Queue.__init__() *kwargs : Any Passed through to saq.Queue.__init__()","title":"Parameters"},{"location":"reference/starlite_saqlalchemy/worker/#starlite_saqlalchemy.worker.Worker","text":"Bases: saq . Worker Modify behavior of saq worker for orchestration by Starlite.","title":"Worker"},{"location":"reference/starlite_saqlalchemy/worker/#starlite_saqlalchemy.worker.Worker.on_app_startup","text":"on_app_startup () Attach the worker to the running event loop.","title":"on_app_startup()"},{"location":"reference/starlite_saqlalchemy/worker/#starlite_saqlalchemy.worker.create_worker_instance","text":"create_worker_instance ( functions ) Parameters: Name Type Description Default functions abc . Collection [ WorkerFunction | tuple [ str , WorkerFunction ]] Functions to be called via the async workers. required Returns: Type Description Worker The worker instance, instantiated with functions .","title":"create_worker_instance()"},{"location":"reference/starlite_saqlalchemy/repository/","text":"Abstraction over the data storage for the application.","title":"repository"},{"location":"reference/starlite_saqlalchemy/repository/abc/","text":"AbstractRepository defines the interface for interacting with the application persistent data. AbstractRepository \u00b6 AbstractRepository ( session ) Bases: Generic [ T ] Defines the interface for interacting with the application persistent data. id_attribute class-attribute \u00b6 id_attribute = 'id' Name of the primary identifying attribute on model_type . model_type class-attribute \u00b6 model_type : type [ T ] Type of object represented by the repository. add async abstractmethod \u00b6 add ( data ) Add data to the collection. Parameters: Name Type Description Default data T Instance to be added to the collection. required Returns: Type Description T The added instance. check_not_found staticmethod \u00b6 check_not_found ( item_or_none ) Raise RepositoryNotFoundException if item_or_none is None . Parameters: Name Type Description Default item_or_none T | None Item to be tested for existence. required Returns: Type Description T The item, if it exists. delete async abstractmethod \u00b6 delete ( id_ ) Delete instance identified by id_ Parameters: Name Type Description Default id_ Any Identifier of instance to be deleted. required Returns: Type Description T The deleted instance. Raises: Type Description RepositoryNotFoundException If no instance found identified by id_ . get async abstractmethod \u00b6 get ( id_ ) Get instance identified by id_ . Parameters: Name Type Description Default id_ Any Identifier of the instance to be retrieved. required Returns: Type Description T The retrieved instance. Raises: Type Description RepositoryNotFoundException If no instance found identified by id_ . get_id_attribute_value classmethod \u00b6 get_id_attribute_value ( item ) Return the value of attribute named as self.id_attribute on item . Parameters: Name Type Description Default item T Anything that should have an attribute named as self.id_attribute value. required Returns: Type Description Any The value of attribute on item named as self.id_attribute . list async abstractmethod \u00b6 list ( * filters , ** kwargs ) Get a list of instances, optionally filtered. Parameters: Name Type Description Default *filters FilterTypes Types for specific filtering operations. () **kwargs Any Instance attribute value filters. {} Returns: Type Description list [ T ] The list of instances, after filtering applied. set_id_attribute_value classmethod \u00b6 set_id_attribute_value ( id_ , item ) Return the item after the ID is set to the appropriate attribute. Parameters: Name Type Description Default id_ Any Value of ID to be set on instance required item T Anything that should have an attribute named as self.id_attribute value. required Returns: Type Description Any Item with id_ set to cls.id_attribute update async abstractmethod \u00b6 update ( data ) Update an existing instance with the attribute values present on data . Parameters: Name Type Description Default data T An instance that should have a value for self.id_attribute that exists in the collection. required Returns: Type Description T The updated instance. Raises: Type Description RepositoryNotFoundException If no instance found with same identifier as data . upsert async abstractmethod \u00b6 upsert ( data ) Update an existing instance with the attribute values present on data , or create a new instance if one doesn't exist. Parameters: Name Type Description Default data T Instance to update existing, or be created. Identifier used to determine if an existing instance exists is the value of an attribute on data named as value of self.id_attribute . required Returns: Type Description T The updated or created instance. Raises: Type Description RepositoryNotFoundException If no instance found with same identifier as data .","title":"abc"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository","text":"AbstractRepository ( session ) Bases: Generic [ T ] Defines the interface for interacting with the application persistent data.","title":"AbstractRepository"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.id_attribute","text":"id_attribute = 'id' Name of the primary identifying attribute on model_type .","title":"id_attribute"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.model_type","text":"model_type : type [ T ] Type of object represented by the repository.","title":"model_type"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.add","text":"add ( data ) Add data to the collection. Parameters: Name Type Description Default data T Instance to be added to the collection. required Returns: Type Description T The added instance.","title":"add()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.check_not_found","text":"check_not_found ( item_or_none ) Raise RepositoryNotFoundException if item_or_none is None . Parameters: Name Type Description Default item_or_none T | None Item to be tested for existence. required Returns: Type Description T The item, if it exists.","title":"check_not_found()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.delete","text":"delete ( id_ ) Delete instance identified by id_ Parameters: Name Type Description Default id_ Any Identifier of instance to be deleted. required Returns: Type Description T The deleted instance. Raises: Type Description RepositoryNotFoundException If no instance found identified by id_ .","title":"delete()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.get","text":"get ( id_ ) Get instance identified by id_ . Parameters: Name Type Description Default id_ Any Identifier of the instance to be retrieved. required Returns: Type Description T The retrieved instance. Raises: Type Description RepositoryNotFoundException If no instance found identified by id_ .","title":"get()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.get_id_attribute_value","text":"get_id_attribute_value ( item ) Return the value of attribute named as self.id_attribute on item . Parameters: Name Type Description Default item T Anything that should have an attribute named as self.id_attribute value. required Returns: Type Description Any The value of attribute on item named as self.id_attribute .","title":"get_id_attribute_value()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.list","text":"list ( * filters , ** kwargs ) Get a list of instances, optionally filtered. Parameters: Name Type Description Default *filters FilterTypes Types for specific filtering operations. () **kwargs Any Instance attribute value filters. {} Returns: Type Description list [ T ] The list of instances, after filtering applied.","title":"list()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.set_id_attribute_value","text":"set_id_attribute_value ( id_ , item ) Return the item after the ID is set to the appropriate attribute. Parameters: Name Type Description Default id_ Any Value of ID to be set on instance required item T Anything that should have an attribute named as self.id_attribute value. required Returns: Type Description Any Item with id_ set to cls.id_attribute","title":"set_id_attribute_value()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.update","text":"update ( data ) Update an existing instance with the attribute values present on data . Parameters: Name Type Description Default data T An instance that should have a value for self.id_attribute that exists in the collection. required Returns: Type Description T The updated instance. Raises: Type Description RepositoryNotFoundException If no instance found with same identifier as data .","title":"update()"},{"location":"reference/starlite_saqlalchemy/repository/abc/#starlite_saqlalchemy.repository.abc.AbstractRepository.upsert","text":"upsert ( data ) Update an existing instance with the attribute values present on data , or create a new instance if one doesn't exist. Parameters: Name Type Description Default data T Instance to update existing, or be created. Identifier used to determine if an existing instance exists is the value of an attribute on data named as value of self.id_attribute . required Returns: Type Description T The updated or created instance. Raises: Type Description RepositoryNotFoundException If no instance found with same identifier as data .","title":"upsert()"},{"location":"reference/starlite_saqlalchemy/repository/exceptions/","text":"Repository exception types. RepositoryConflictException \u00b6 Bases: RepositoryException Exception for data integrity errors. RepositoryException \u00b6 Bases: Exception Base repository exception type. RepositoryNotFoundException \u00b6 Bases: RepositoryException Raised when a method referencing a specific instance by identity is called and no instance with that identity exists.","title":"exceptions"},{"location":"reference/starlite_saqlalchemy/repository/exceptions/#starlite_saqlalchemy.repository.exceptions.RepositoryConflictException","text":"Bases: RepositoryException Exception for data integrity errors.","title":"RepositoryConflictException"},{"location":"reference/starlite_saqlalchemy/repository/exceptions/#starlite_saqlalchemy.repository.exceptions.RepositoryException","text":"Bases: Exception Base repository exception type.","title":"RepositoryException"},{"location":"reference/starlite_saqlalchemy/repository/exceptions/#starlite_saqlalchemy.repository.exceptions.RepositoryNotFoundException","text":"Bases: RepositoryException Raised when a method referencing a specific instance by identity is called and no instance with that identity exists.","title":"RepositoryNotFoundException"},{"location":"reference/starlite_saqlalchemy/repository/filters/","text":"Datastructures used by repository to apply filtering to collection queries. BeforeAfter dataclass \u00b6 Data required to filter a query on a datetime column. after class-attribute \u00b6 after : datetime | None Filter results where field later than this datetime before class-attribute \u00b6 before : datetime | None Filter results where field earlier than this datetime field_name class-attribute \u00b6 field_name : str Name of the model attribute to filter on. CollectionFilter dataclass \u00b6 Bases: Generic [ T ] Data required to construct a `WHERE ... IN (...)` clause. field_name class-attribute \u00b6 field_name : str Name of the model attribute to filter on. values class-attribute \u00b6 values : abc . Collection [ T ] Values for IN clause. LimitOffset dataclass \u00b6 Data required to add limit/offset filtering to a query. limit class-attribute \u00b6 limit : int Value for LIMIT clause of query. offset class-attribute \u00b6 offset : int Value for OFFSET clause of query.","title":"filters"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.BeforeAfter","text":"Data required to filter a query on a datetime column.","title":"BeforeAfter"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.BeforeAfter.after","text":"after : datetime | None Filter results where field later than this datetime","title":"after"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.BeforeAfter.before","text":"before : datetime | None Filter results where field earlier than this datetime","title":"before"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.BeforeAfter.field_name","text":"field_name : str Name of the model attribute to filter on.","title":"field_name"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.CollectionFilter","text":"Bases: Generic [ T ] Data required to construct a `WHERE ... IN (...)` clause.","title":"CollectionFilter"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.CollectionFilter.field_name","text":"field_name : str Name of the model attribute to filter on.","title":"field_name"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.CollectionFilter.values","text":"values : abc . Collection [ T ] Values for IN clause.","title":"values"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.LimitOffset","text":"Data required to add limit/offset filtering to a query.","title":"LimitOffset"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.LimitOffset.limit","text":"limit : int Value for LIMIT clause of query.","title":"limit"},{"location":"reference/starlite_saqlalchemy/repository/filters/#starlite_saqlalchemy.repository.filters.LimitOffset.offset","text":"offset : int Value for OFFSET clause of query.","title":"offset"},{"location":"reference/starlite_saqlalchemy/repository/sqlalchemy/","text":"SQLAlchemy-based implementation of the repository protocol. SQLAlchemyRepository \u00b6 SQLAlchemyRepository ( session , select_ = None ) Bases: AbstractRepository [ ModelT ] SQLAlchemy based implementation of the repository interface. Parameters: Name Type Description Default session AsyncSession Session managing the unit-of-work for the operation. required select_ Select[tuple[ModelT]] | None To facilitate customization of the underlying select query. None check_health classmethod async \u00b6 check_health ( session ) Perform a health check on the database. Parameters: Name Type Description Default session AsyncSession through which we runa check statement required Returns: Type Description bool True if healthy. wrap_sqlalchemy_exception \u00b6 wrap_sqlalchemy_exception () Do something within context to raise a RepositoryException chained from an original SQLAlchemyError . >>> try: ... with wrap_sqlalchemy_exception(): ... raise SQLAlchemyError(\"Original Exception\") ... except RepositoryException as exc: ... print(f\"caught repository exception from {type(exc.__context__)}\") ... caught repository exception from <class 'sqlalchemy.exc.SQLAlchemyError'>","title":"sqlalchemy"},{"location":"reference/starlite_saqlalchemy/repository/sqlalchemy/#starlite_saqlalchemy.repository.sqlalchemy.SQLAlchemyRepository","text":"SQLAlchemyRepository ( session , select_ = None ) Bases: AbstractRepository [ ModelT ] SQLAlchemy based implementation of the repository interface. Parameters: Name Type Description Default session AsyncSession Session managing the unit-of-work for the operation. required select_ Select[tuple[ModelT]] | None To facilitate customization of the underlying select query. None","title":"SQLAlchemyRepository"},{"location":"reference/starlite_saqlalchemy/repository/sqlalchemy/#starlite_saqlalchemy.repository.sqlalchemy.SQLAlchemyRepository.check_health","text":"check_health ( session ) Perform a health check on the database. Parameters: Name Type Description Default session AsyncSession through which we runa check statement required Returns: Type Description bool True if healthy.","title":"check_health()"},{"location":"reference/starlite_saqlalchemy/repository/sqlalchemy/#starlite_saqlalchemy.repository.sqlalchemy.wrap_sqlalchemy_exception","text":"wrap_sqlalchemy_exception () Do something within context to raise a RepositoryException chained from an original SQLAlchemyError . >>> try: ... with wrap_sqlalchemy_exception(): ... raise SQLAlchemyError(\"Original Exception\") ... except RepositoryException as exc: ... print(f\"caught repository exception from {type(exc.__context__)}\") ... caught repository exception from <class 'sqlalchemy.exc.SQLAlchemyError'>","title":"wrap_sqlalchemy_exception()"},{"location":"reference/starlite_saqlalchemy/repository/types/","text":"Repository type definitions.","title":"types"}]}